name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/aosp-realm/android_kernel_xiaomi_apollo.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'main'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'perf'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'apollo_defconfig vendor/debugfs.config'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain"
        required: true
        default: 'https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-15.0.0_r1/clang-r522817.tar.gz'

jobs:
  Build_Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python-is-python3
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq

      - name: Cloning Kernel Source
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}/kernel

      - name: Set-up Toolchain
        run: |
          mkdir -p ${{ github.workspace }}/toolchain
          if [[ "${{ github.event.inputs.TOOLCHAIN_URL }}" == *.tar.gz ]]; then
              wget -O clang-toolchain.tar.gz "${{ github.event.inputs.TOOLCHAIN_URL }}"
              tar -xzf clang-toolchain.tar.gz -C ${{ github.workspace }}/toolchain
              rm -f clang-toolchain.tar.gz
          else
              git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.TOOLCHAIN_URL }} ${{ github.workspace }}/toolchain
          fi

      - name: Set environment variables
        run: |
          echo "OBJDIR=${{ github.workspace }}/kernel/out" >> $GITHUB_ENV
          echo "CLANG_DIR=${{ github.workspace }}/toolchain" >> $GITHUB_ENV
          echo "KERNEL_NAME=${{ github.event.inputs.KERNEL_NAME }}" >> $GITHUB_ENV
          echo "ZIP_NAME=${{ github.event.inputs.KERNEL_NAME }}-$(date +"%d%m%Y").zip" >> $GITHUB_ENV
          echo "OUTPUT_DIR=${{ github.workspace }}/compiled" >> $GITHUB_ENV
          cd ${{ github.workspace }}/kernel && echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV

          KERNEL_SOURCE_URL="${{ github.event.inputs.KERNEL_SOURCE }}"
          if [[ "${KERNEL_SOURCE_URL}" == *.git ]]; then
            KERNEL_SOURCE_URL="${KERNEL_SOURCE_URL%.git}"
          fi
          echo "KERNEL_SOURCE_URL=${KERNEL_SOURCE_URL}" >> $GITHUB_ENV

      - name: Start Compilation
        run: |
          mkdir -p ${{ env.OUTPUT_DIR }}
          cd ${{ github.workspace }}/kernel

          export PATH="${{ env.CLANG_DIR }}/bin:$PATH"

          make_defconfig() {
              make -s ARCH=arm64 O=${{ env.OBJDIR }} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
          }

          compile() {
              make -j$(nproc --all) \
              O=${{ env.OBJDIR }} \
              ARCH=arm64 \
              CC=clang \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
              CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
              AR=llvm-ar \
              LLVM_NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              LD=ld.lld \
              NM=llvm-nm \
              LLVM=1 \
              LLVM_IAS=1
          }

          start=$(date +"%s")
          make_defconfig
          compile
          end=$(date +"%s")
          echo "BUILD COMPLETED IN $((end - start)) SECONDS"

      - name: Packing flashable zip
        run: |
          cd "${{ env.OBJDIR }}"

          IMAGE="arch/arm64/boot/Image.gz"
          DTBO="arch/arm64/boot/dtbo.img"
          DTB="arch/arm64/boot/dts/qcom/sdmmagpie-odessa-base.dtb"

          if [[ -f "$IMAGE" && -f "$DTBO" && -f "$DTB" ]]; then
              mkdir -p temp_zip
              cp "$IMAGE" temp_zip/Image.gz
              cp "$DTBO" temp_zip/dtbo.img
              cp "$DTB" temp_zip/dtb

              cp -r ${{ github.workspace }}/META-INF temp_zip/
              cp -r ${{ github.workspace }}/tools temp_zip/
              cp -r ${{ github.workspace }}/version temp_zip/
              cp ${{ github.workspace }}/anykernel.sh temp_zip/

              cd temp_zip
              ZIP_NAME="${{ github.event.inputs.KERNEL_NAME }}-$(date +%d%m%Y).zip"
              zip -r9 "$ZIP_NAME" META-INF version anykernel.sh tools Image.gz dtb dtbo.img
              mv "$ZIP_NAME" "${{ env.OUTPUT_DIR }}/"
              cd ..
              rm -rf temp_zip
          else
              echo "ERROR: Required file(s) missing!"
              exit 1
          fi

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/compiled/*
          name: ${{ github.event.inputs.KERNEL_NAME }} // ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            [Kernel Source](${{ env.KERNEL_SOURCE_URL }}/tree/${{ github.event.inputs.KERNEL_BRANCH }})
            [Latest Commit](${{ env.KERNEL_SOURCE_URL }}/commit/${{ env.COMMIT_ID }}) at the time of building.
